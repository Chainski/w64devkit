name: Build w64devkit

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, x86]

    steps:
      - uses: actions/checkout@v4

      # Cache previously downloaded sources
      - uses: actions/cache@v4
        with:
          path: downloads
          key: w64devkit-sources-${{ runner.os }}-${{ matrix.arch }}
          restore-keys: w64devkit-sources-

      # Pre-download reliable source tarballs
      - name: Download dependencies
        run: |
          mkdir -p downloads
          cd downloads
          # GNU sources
          curl -L -O https://ftp.gnu.org/gnu/gcc/gcc-15.2.0/gcc-15.2.0.tar.xz
          curl -L -O https://ftp.gnu.org/gnu/binutils/binutils-2.45.tar.xz
          curl -L -O https://ftp.gnu.org/gnu/gmp/gmp-6.3.0.tar.xz
          curl -L -O https://ftp.gnu.org/gnu/mpfr/mpfr-4.2.2.tar.xz
          curl -L -O https://ftp.gnu.org/gnu/mpc/mpc-1.3.1.tar.gz
          curl -L -O https://ftp.gnu.org/gnu/libiconv/libiconv-1.18.tar.gz
          curl -L -O https://ftp.gnu.org/gnu/make/make-4.4.1.tar.gz
          curl -L -O https://ftp.gnu.org/gnu/gdb/gdb-16.2.tar.xz
          # Other sources
          curl -L -O https://github.com/libexpat/libexpat/releases/download/R_2_7_0/expat-2.7.0.tar.xz
          curl -L -O https://github.com/mirror/busybox/releases/download/v5579/busybox-w32-FRP-5579-g5749feb35.tgz
          curl -L -O https://github.com/universal-ctags/ctags/releases/download/6.0.0/ctags-6.0.0.tar.gz
          curl -L -O https://github.com/wmcbrine/PDCurses/archive/refs/tags/3.9.tar.gz
          curl -L -O https://github.com/vim/vim/archive/refs/tags/v9.0.tar.bz2

      # Install Docker (preinstalled on runners, but ensures latest)
      - name: Install Docker CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io

      - name: Make build script executable
        run: chmod +x ./multibuild.sh

      # Run multibuild.sh, mounting downloads into Docker build
      - name: Run build
        run: |
          export LOCAL_DOWNLOAD=$(pwd)/downloads
          if [ "${{ matrix.arch }}" = "x64" ]; then
            ./multibuild.sh -8
          else
            ./multibuild.sh -4
          fi

      # Upload artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: w64devkit-${{ matrix.arch }}
          path: w64devkit-*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version string
        id: version
        run: |
          VER="$(git describe --tags --always | tr v -)"
          echo "ver=$VER" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Set up GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Delete existing release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete ${{ steps.version.outputs.ver }} --yes || true
          git push origin :refs/tags/${{ steps.version.outputs.ver }} || true

      - name: Create new release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.ver }}
          name: w64devkit-${{ steps.version.outputs.ver }}
          files: dist/**/*.exe
